#!/usr/bin/env powershell

Write-Host "üîß VERIFICACI√ìN COMPLETA DE CORRECCIONES" -ForegroundColor Cyan
Write-Host "=======================================" -ForegroundColor Cyan

# 1. Verificar archivos clave
Write-Host "`nüìÅ Verificando archivos modificados..." -ForegroundColor Yellow

$files = @(
    "src/index.js",
    "src/services/supabase.js", 
    "fly.toml",
    "package.json"
)

foreach ($file in $files) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file existe" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file NO ENCONTRADO" -ForegroundColor Red
    }
}

# 2. Verificar configuraci√≥n de puerto
Write-Host "`nüîç Verificando configuraci√≥n de puerto..." -ForegroundColor Yellow

$indexContent = Get-Content "src/index.js" -Raw
if ($indexContent -match "PORT.*5000") {
    Write-Host "‚úÖ Puerto 5000 configurado en index.js" -ForegroundColor Green
} else {
    Write-Host "‚ùå Puerto 5000 NO configurado en index.js" -ForegroundColor Red
}

$flyContent = Get-Content "fly.toml" -Raw
if ($flyContent -match "internal_port = 5000") {
    Write-Host "‚úÖ Puerto 5000 configurado en fly.toml" -ForegroundColor Green
} else {
    Write-Host "‚ùå Puerto 5000 NO configurado en fly.toml" -ForegroundColor Red
}

# 3. Verificar eliminaci√≥n de WebSocket duplicado
Write-Host "`nüîå Verificando WebSocket..." -ForegroundColor Yellow

$supabaseContent = Get-Content "src/services/supabase.js" -Raw
if ($supabaseContent -notmatch "new WebSocketServer.*port.*8080") {
    Write-Host "‚úÖ WebSocket duplicado eliminado de supabase.js" -ForegroundColor Green
} else {
    Write-Host "‚ùå WebSocket duplicado A√öN EXISTE en supabase.js" -ForegroundColor Red
}

if ($supabaseContent -match "suscribirCambiosInventario\(wss\)") {
    Write-Host "‚úÖ Funci√≥n suscribirCambiosInventario acepta par√°metro wss" -ForegroundColor Green
} else {
    Write-Host "‚ùå Funci√≥n suscribirCambiosInventario NO acepta par√°metro wss" -ForegroundColor Red
}

# 4. Verificar que no hay procesos usando puerto 5000
Write-Host "`nüö¶ Verificando disponibilidad del puerto 5000..." -ForegroundColor Yellow

$portCheck = netstat -ano | Select-String ":5000"
if ($portCheck) {
    Write-Host "‚ö†Ô∏è  Puerto 5000 est√° ocupado por:" -ForegroundColor Yellow
    $portCheck | ForEach-Object { Write-Host "   $_" -ForegroundColor Gray }
} else {
    Write-Host "‚úÖ Puerto 5000 disponible" -ForegroundColor Green
}

# 5. Verificar dependencias
Write-Host "`nüì¶ Verificando dependencias..." -ForegroundColor Yellow

if (Test-Path "node_modules") {
    Write-Host "‚úÖ node_modules existe" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  node_modules no encontrado. Ejecute: npm install" -ForegroundColor Yellow
}

# 6. Resumen y pr√≥ximos pasos
Write-Host "`nüìã PR√ìXIMOS PASOS:" -ForegroundColor Cyan
Write-Host "=================" -ForegroundColor Cyan
Write-Host "1. Si no hay errores ‚ùå, ejecuta: npm start" -ForegroundColor White
Write-Host "2. Prueba los endpoints: curl http://localhost:5000/health" -ForegroundColor White
Write-Host "3. Si todo funciona, deploya: fly deploy" -ForegroundColor White
Write-Host ""
Write-Host "üìÅ Archivos de ayuda creados:" -ForegroundColor Green
Write-Host "   - DEPLOY_FIXES.md  (resumen de cambios)" -ForegroundColor Gray
Write-Host "   - CHECKLIST.md     (lista de verificaci√≥n)" -ForegroundColor Gray
Write-Host "   - test-local.bat   (pruebas locales)" -ForegroundColor Gray

Write-Host "`nüéØ ¬°Correcciones completadas!" -ForegroundColor Green

Read-Host "Presiona Enter para continuar"
